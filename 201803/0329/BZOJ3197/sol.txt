题目大意：给定一棵树和两组权值，求第一组权值最少改变多少个之后这棵树经过重标号之后与第二组权值相同（权值只有01）
这题真的是太神了！！！
首先设$f[i][j]$表示树1的$i$子树匹配树2的$j$子树的最小代价，这样就是一个树形dp，我们从下往上更新。
转移的必要条件是$i$和$j$所在子树同构而且二者深度相同。同时，要保证这两个子树对应所有子节点的最小花费已经求出。
那么现在我们要判断子树是否同构，这个东西可以用树hash实现，hash值相同的节点，而且深度相同，就是可以对应的。
但是因为是无根树，直接任选根hash可能会有问题，因此我们还要找出重心作根来hash。（如果有多个就加一个虚点）
接下来我们要处理的问题就是最小花费的匹配，这个东西显然是一个费用流的模型。
对于可以对应的两个点$(i,j)$，我们就在这两个点之间连一条费用为$f[i][j]$，流量为1的边即可。
因为树同构，最终的答案就是$f[rt][rt]$。
